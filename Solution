class Solution:
    # 两数之和 leetcode_1
    def twoSum(self, nums, target: int):
        n = len(nums)
        for i in range(n):
            for j in range(i + 1, n):
                if nums[i] + nums[j] == target:
                    return [i, j]
        return []

    # 回文数 leetcode_9
    def isPalindrome(self, x: int) -> bool:
        s = str(x)
        rs = s[::-1]
        if s[0] == "-":
            return False
        elif s[-1] == "0" and len(s) > 1:
            return False
        elif s == rs:
            return True
        else:
            return False

    # 罗马数字转整数 leetcode_13
    def romanToInt(self, s: str) -> int:
        d = {'I': 1, 'IV': 4, 'V': 5, 'IX': 9, 'X': 10, 'XL': 40, 'L': 50, 'XC': 90, 'C': 100, 'CD': 400, 'D': 500,
             'CM': 900, 'M': 1000}
        result = 0
        i = 0
        while i < len(s):
            # 查看当前位和下一位的字符
            str1 = s[i:i + 2]
            # 如果当前位置是特殊情况，那么返回其在字典中对应值，并且下一次从特殊字符之后一位开始索引
            if str1 in d:
                result += d.get(str1)
                i += 2
            # 如果当前位不是特殊情况，那么只返回当前位的数值
            else:
                result += d[s[i]]
                i += 1
        return result

    # 最长公共前缀 leetcode_14
    def longestCommonPrefix(self, strs) -> str:
        lstrs = []
        for str in strs:
            lstr = len(str)
            lstrs.append(lstr)
        minLstrs = min(lstrs)
        n = 0
        for i in range(minLstrs):
            ls0 = strs[0]
            s = ls0[i:i + 1]
            for str in strs:
                m = 0
                if s != str[i:i + 1]:
                    break
                else:
                    m += 1
            if m == 0:
                break
            n += 1
        result = strs[0][0:n]
        return result

    # 有效的括号 leetcode_20
    def isValid(self, s) -> bool:
        s_new = s.replace('()', '').replace('[]', '').replace('{}', '')
        while len(s_new) < len(s):
            s = s_new
            s_new = s.replace('()', '').replace('[]', '').replace('{}', '')
        return not s_new

    # 合并两个有序链表 leetcode_21
    def mergeTwoLists(self, l1, l2):
        if not l1: return l2  # 终止条件，直到两个链表都空
        if not l2: return l1
        if l1.val <= l2.val:  # 递归调用
            l1.next = self.mergeTwoLists(l1.next, l2)
            return l1
        else:
            l2.next = self.mergeTwoLists(l1, l2.next)
            return l2

    # 删除有序数组中的重复项 leetcode_26
    def removeDuplicates(self, list):
        n = len(list)
        list1 = []

        return len(list1)


if __name__ == "__main__":
    s = Solution()
    s.removeDuplicates([1, 1, 2, 2, 3, 3])
